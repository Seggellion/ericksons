c
variant_id
c
params[:format]
params[:id]
params
c
line_item["node"]["id"]
c
params[:variant_id]
params
variant_id
cart_id
c
line_id
response.body["errors"]["cartLinesRemove"]
response.body["errors"]
response.body["cartLinesRemove"]
response.body["path"]
response.body
response
response.body["data"]
c
@client.query(query: mutation)
c
@client.query(query: query)
c
@cart
c
response.body["data"]
response.body["data"]["node"]
c
response.body["errors"].present?
response
n
@client.query(query: query)
c
n
response.body["data"]["cartLinesAdd"]["cart"]
response = @client.query(query: query)
response = @client.query(query: query)response = @client.query(query: query)
@client.query(query: query)
query
@client
c
variant_id
@shopify_service.fetch_cart(session[:cart_id])
session[:cart_id]
cart_id
@shopify_service.add_to_cart(cart_id, variant_id)
c
product
@product
c
response
response.body["data"]
response.body
c
response.success?
response
c
@client
c
@client
c
query
@client.query(query: query)
@client
c
@client.query(query: query)
c
query
@client.query(query: query)
@client
c
@client.query(query: query)
query
@client
@lcient
c
@client
c
@client
c
@event.errors.messages
@event.update(event_params).error
@event.update(event_params).errors
@event.update(event_params).errors.messages
@event.update(event_params).messages
@event.update(event_params)
event_params
c
Geolocation.get_location_from_ip(@contact_message.ip_address)
c
Geolocation.get_location_from_ip(@contact_message.ip_address)
@contact_message.country_code
c
Geocoder.search("8.8.8.8")
Geocoder.search(@contact_message.ip_address)
@contact_message.ip_address
c
Geocoder.search("8.8.8.8").inspect
Geocoder.search("8.8.8.8")
Geocoder.search(@contact_message.ip_address)
Geocoder.search(@contact_message.ip_address).first.country_code
@contact_message.ip_address
@contact_message.ip_address = "104.142.124.57"
@contact_messaage.ip_address
@contact_message.ip_address = request.remote_ip
request.remote_ip
@contact_messaage.ip_address
c
response
c
response
n
sg
n
SendGrid::API.new(api_key: Setting.get('sendgrid_api_key'))
Setting.get('sendgrid_api_key')
c
Setting.get('sendgrid_api_key').json[0]
Setting.get('sendgrid_api_key').json
Setting.get('sendgrid_api_key')
Setting.get('sendgrid_api_key').value
Setting.get('sendgrid_api_key')
Setting.get('sendgrid_api_key'))
mail = Mail.new(from, subject, to, content)
Mail.new(from, subject, to, content)
content
c
ContactMailer.with(contact_message: @contact_message).new_message_email.deliver_later
User.last
c
User.find_or_create_by(email: @contact_message.email.downcase, user_type:50, uid:0, provider:'contact')
User.last
User.find_or_create_by(email: @contact_message.email.downcase)
@contact_message.email
c
ContactMessage.destroy_all
ContactMessage.destroy
ContactMessage.last
ContactMessage.where(email: email).where('created_at >= ?', 30.minutes.ago).exists?
c
@contact_message
c
@block.image.present?
@block.blank?
@block.present?
@block
c
setting_params[:image]
setting_params
c
setting_params
c
@setting.image.attached?
@setting.image.attach(setting_params[:value])
setting_params[:value]
setting_params.value
setting_params
setting_params[:image]
params
@setting.image.attached?
@setting.image
@setting.save
c
setting.image
setting.image.attached?
setting.image
c
setting.image.url
setting.image
setting
c
Setting.get('logo').image
Setting.get('logo').attached?
Setting.get('logo').image
Setting.get('logo').image.present?
Setting.get('logo').present?
Setting.get('logo')
c
Setting.get('logo').attached?
Setting.get('logo').image
Setting.get('logo')
c
setting_params
c
child
c
child.item_type
child
c
params
c
page_path
announcement.parsed_value[1]
announcement.parsed_value[1])
c
announcement.parsed_value
announcement
c
@setting.value
@setting
c
Page.last
params
menu_item_params
@menu_item.errors.messages
@menu_item.errors
@menu_item.save.messages
@menu_item.save.errors
@menu_item.save
c
 MenuItem.find(params[:menu_item_id])
MenuItem.last
params
 MenuItem.find(params[:id])
@menu_item
c
params
@menu_item.errors.messages
@menu_item.errors
@menu_item.save.messages.errors
@menu_item.save.errors
@menu_item.save
@menu_item
c
@menu.menu_items.build(menu_item_params)
c
@menu.menu_items.build(menu_item_params)
MenuItem.last
menu_item_params
c
menu_item_params
@menu
params
c
cc
@menu
@menu_item
n
menu_item_params
menu_items_params
params
c
@menu_item
c
menu_item_params
@menu_item
params
c
params
menu_item_params
@menu
c
